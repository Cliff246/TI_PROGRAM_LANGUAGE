	section	.text,"ax",@progbits
	assume	adl = 1
	section	.text,"ax",@progbits
	public	_compare_strings
_compare_strings:
	ld	hl, -6
	call	__frameset
	ld	de, (ix + 6)
	ld	iy, (ix + 9)
	ld	a, (ix + 12)
	ld	c, 0
	or	a, a
	sbc	hl, hl
	ld	l, a
	inc	hl
	ld	(ix + -3), hl
BB0_1:
	ld	hl, (ix + -3)
	dec	hl
	ld	(ix + -3), hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB0_5
	lea	hl, iy + 3
	ld	(ix + -6), hl
	ld	hl, (iy)
	push	hl
	push	de
	call	_strcmp
	ld	c, 0
	pop	de
	pop	de
	ld	de, (ix + 6)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	iy, (ix + -6)
	jq	z, BB0_1
	jq	BB0_4
BB0_5:
	ld	l, c
BB0_4:
	ld	a, l
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_ti_open_file
_ti_open_file:
	ld	hl, -7
	call	__frameset
	ld	de, (ix + 6)
	ld	bc, 0
	push	de
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB1_1
	ld	hl, (ix + 9)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB1_4
BB1_1:
	push	bc
	pop	hl
BB1_9:
	ld	sp, ix
	pop	ix
	ret
BB1_4:
	push	de
	call	_strlen
	pop	de
	ld	bc, 65535
	call	__iand
	ld	(ix + -6), hl
	ld	de, 4
	add	hl, de
	push	hl
	ld	hl, 1
	push	hl
	call	_calloc
	pop	de
	pop	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB1_6
	ld	hl, -1
	push	hl
	call	_os_ThrowError
	pop	hl
	ld	hl, 0
	jq	BB1_9
BB1_6:
	ld	(ix + -3), hl
	ld	hl, (ix + 9)
	push	hl
	ld	hl, (ix + 6)
	push	hl
	call	_ti_Open
	pop	hl
	pop	hl
	ld	(ix + -7), a
	or	a, a
	ld	hl, -1
	push	hl
	call	z, _os_ThrowError
	pop	hl
	ld	hl, (ix + -3)
	ld	a, (ix + -7)
	ld	(hl), a
	ld	iy, (ix + -3)
	inc	iy
	ld	hl, 3
	push	hl
	ld	hl, (ix + 9)
	push	hl
	push	iy
	call	_memcpy
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (ix + -6)
	push	hl
	ld	hl, (ix + 6)
	push	hl
	ld	iy, (ix + -3)
	pea	iy + 4
	call	_memcpy
	ld	hl, (ix + -3)
	pop	de
	pop	de
	pop	de
	jq	BB1_9
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_pull_file
_pull_file:
	ld	hl, -19
	call	__frameset
	ld	hl, L___const.pull_file.pmodes
	ld	de, 12
	lea	bc, ix + -12
	push	de
	push	hl
	ld	(ix + -15), bc
	push	bc
	call	_memcpy
	ld	hl, (ix + 6)
	pop	de
	pop	de
	pop	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	de, -1
	jq	z, BB2_9
	ex	de, hl
	inc	de
	ld	bc, 4
	ld	(ix + -18), de
BB2_2:
	push	bc
	ld	hl, (ix + -15)
	push	hl
	push	de
	call	_compare_strings
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (ix + 6)
	ld	l, (hl)
	or	a, a
	jq	z, BB2_3
	push	hl
	call	_ti_Close
	pop	hl
	ld	hl, L_.str.1
	push	hl
	ld	iy, (ix + 6)
	pea	iy + 4
	call	_ti_Open
	ld	e, a
	pop	hl
	pop	hl
	or	a, a
	jq	z, BB2_8
	ld	hl, 3
	push	hl
	ld	hl, L_.str.1
	push	hl
	ld	hl, (ix + -18)
	push	hl
	ld	(ix + -19), e
	call	_memcpy
	ld	de, (ix + -18)
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (ix + 6)
	ld	a, (ix + -19)
	ld	(hl), a
	ld	bc, 4
	jq	BB2_2
BB2_3:
	push	hl
	call	_ti_GetSize
	pop	de
	ld	de, 0
	ld	e, l
	ld	d, h
	ld	(ix + -15), de
	push	de
	call	_malloc
	push	hl
	pop	de
	pop	hl
	push	de
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB2_8
	ld	hl, (ix + 6)
	ld	l, (hl)
	ld	a, l
	or	a, a
	jq	z, BB2_8
	push	hl
	ld	hl, (ix + -15)
	push	hl
	ld	hl, 8
	push	hl
	push	de
	ld	(ix + -18), de
	call	_ti_Read
	pop	de
	pop	de
	pop	de
	pop	de
	ld	de, (ix + -18)
	ld	bc, (ix + -15)
	or	a, a
	sbc	hl, bc
	jq	z, BB2_10
BB2_8:
	ld	hl, -1
	push	hl
	call	_os_ThrowError
	pop	hl
	ld	de, -1
BB2_9:
	push	de
	call	_os_ThrowError
	ld	de, 0
	pop	hl
BB2_10:
	ex	de, hl
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_write_file
_write_file:
	ld	hl, -22
	call	__frameset
	ld	hl, L___const.write_file.pmode
	ld	de, 15
	lea	bc, ix + -15
	push	de
	push	hl
	ld	(ix + -18), bc
	push	bc
	call	_memcpy
	ld	de, (ix + 6)
	pop	hl
	pop	hl
	pop	hl
	push	de
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB3_8
	ld	hl, (ix + 9)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB3_8
	inc	de
	ld	hl, 5
	ld	(ix + -21), de
BB3_3:
	push	hl
	ld	hl, (ix + -18)
	push	hl
	push	de
	call	_compare_strings
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (ix + 6)
	ld	l, (hl)
	or	a, a
	jq	z, BB3_4
	push	hl
	call	_ti_Close
	pop	hl
	ld	hl, L_.str.2
	push	hl
	ld	hl, (ix + 6)
	push	hl
	pop	iy
	pea	iy + 4
	call	_ti_Open
	ld	e, a
	pop	hl
	pop	hl
	or	a, a
	jq	z, BB3_8
	ld	(ix + -22), e
	ld	de, 3
	push	de
	ld	de, L_.str.2
	push	de
	ld	hl, (ix + -21)
	push	hl
	call	_memcpy
	ld	de, (ix + -21)
	pop	hl
	pop	hl
	pop	hl
	ld	a, (ix + -22)
	ld	hl, (ix + 6)
	ld	(hl), a
	ld	hl, 5
	jq	BB3_3
BB3_4:
	push	hl
	call	_ti_GetSize
	pop	de
	ld	iy, (ix + 6)
	ld	e, (iy)
	ld	a, e
	or	a, a
	jq	z, BB3_8
	ld	bc, 0
	ld	c, l
	ld	b, h
	ld	(ix + -18), bc
	ld	l, e
	push	hl
	push	bc
	ld	hl, 8
	push	hl
	ld	hl, (ix + 9)
	push	hl
	call	_ti_Write
	pop	de
	pop	de
	pop	de
	pop	de
	ld	bc, 65535
	call	__iand
	ld	de, (ix + -18)
	or	a, a
	sbc	hl, de
	jq	z, BB3_9
BB3_8:
	ld	hl, -1
	push	hl
	call	_os_ThrowError
	pop	hl
BB3_9:
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_create_file
_create_file:
	ld	hl, -4
	call	__frameset
	ld	hl, (ix + 9)
	ld	de, L_.str.4
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB4_2
	ld	hl, (ix + 12)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB4_3
BB4_2:
	ld	hl, -1
	push	hl
	call	_os_ThrowError
	ld	de, L_.str.4
	pop	hl
BB4_3:
	push	de
	ld	hl, (ix + 9)
	push	hl
	call	_ti_Open
	ld	e, a
	pop	hl
	pop	hl
	or	a, a
	jq	z, BB4_11
	ld	hl, (ix + 12)
	push	hl
	ld	(ix + -1), e
	call	_strlen
	ld	(ix + -4), hl
	pop	de
	push	hl
	pop	bc
	inc	bc
	ld	a, (ix + -1)
	ld	e, a
	push	de
	push	bc
	ld	hl, 8
	push	hl
	ld	hl, (ix + 12)
	push	hl
	call	_ti_Write
	ld	a, (ix + -1)
	push	hl
	pop	de
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (ix + -4)
	or	a, a
	sbc	hl, de
	jq	nz, BB4_11
	ex	de, hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB4_11
	ld	hl, (ix + 6)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB4_12
	ld	hl, (ix + 9)
	push	hl
	call	_strlen
	push	hl
	pop	bc
	pop	hl
	ld	hl, (ix + 6)
	ld	de, (hl)
	ld	(ix + -4), bc
	push	bc
	pop	hl
	ld	bc, 4
	add	hl, bc
	push	hl
	push	de
	call	_realloc
	push	hl
	pop	iy
	pop	hl
	pop	hl
	lea	hl, iy + 0
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB4_10
	ld	hl, (ix + 6)
	ld	hl, (hl)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB4_9
BB4_10:
	push	iy
	call	_free
	pop	hl
BB4_11:
	ld	hl, -1
	push	hl
	call	_os_ThrowError
	pop	hl
BB4_12:
	ld	sp, ix
	pop	ix
	ret
BB4_9:
	ld	hl, (ix + 6)
	ld	(hl), iy
	ld	hl, (ix + -4)
	push	hl
	ld	hl, (ix + 9)
	push	hl
	pea	iy + 4
	ld	(ix + -4), iy
	call	_memcpy
	pop	hl
	pop	hl
	pop	hl
	ld.sis	hl, 119
	ld	iy, (ix + -4)
	ld	(iy + 1), l
	ld	(iy + 2), h
	ld	a, (ix + -1)
	ld	(iy), a
	jq	BB4_12
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_close_file
_close_file:
	call	__frameset0
	ld	hl, (ix + 6)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB5_2
	ld	hl, -1
	push	hl
	call	_os_ThrowError
	jq	BB5_3
BB5_2:
	ld	a, (hl)
	ld	e, a
	push	de
	call	_ti_Close
	pop	hl
	ld	hl, (ix + 6)
	push	hl
	call	_free
BB5_3:
	pop	hl
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_new_file
_new_file:
	ld	hl, -3
	call	__frameset
	ld	hl, (ix + 6)
	ld	de, 0
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB6_1
	jq	BB6_7
BB6_1:
	ld	hl, (ix + 9)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB6_2
	jq	BB6_7
BB6_2:
	ld	hl, 4
	push	hl
	call	_malloc
	pop	de
	ld	(ix + -3), hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB6_3
	ld	hl, -1
	push	hl
	call	_os_ThrowError
	pop	hl
	ld	de, 0
	jq	BB6_6
BB6_3:
	ld	hl, (ix + 9)
	push	hl
	ld	hl, (ix + 6)
	push	hl
	pea	ix + -3
	call	_create_file
	pop	hl
	pop	hl
	pop	hl
	ld	de, (ix + -3)
	push	de
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB6_6
	ld	hl, -1
	push	hl
	call	_os_ThrowError
	pop	hl
	ld	de, (ix + -3)
BB6_6:
BB6_7:
	ex	de, hl
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_allocate_more
_allocate_more:
	call	__frameset0
	ld	hl, (ix + 6)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB7_2
	ld	de, (ix + 9)
	push	de
	push	hl
	call	_realloc
	pop	de
	pop	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB7_3
BB7_2:
	ld	hl, -1
	push	hl
	call	_os_ThrowError
	ld	hl, 0
	pop	de
BB7_3:
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_reverse
_reverse:
	ld	hl, -5
	call	__frameset
	ld	iy, (ix + 6)
	ld	bc, 0
	lea	hl, iy + 0
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB8_1
BB8_4:
	ld	sp, ix
	pop	ix
	ret
BB8_1:
	ld	l, (ix + 9)
	ld	h, (ix + 10)
	dec.sis	hl
	ld	(ix + -3), bc
BB8_2:
	ld	(ix + -5), l
	ld	(ix + -4), h
	ld	c, l
	ld	b, h
	ld	hl, (ix + -3)
	or	a, a
	sbc	hl, bc
	jq	nc, BB8_4
	lea	hl, iy + 0
	ld	de, (ix + -3)
	add	hl, de
	ld	a, (hl)
	ld	iy, (ix + 6)
	add	iy, bc
	ld	e, (iy)
	ld	(hl), e
	ld	(iy), a
	ld	iy, (ix + 6)
	ld	hl, (ix + -3)
	inc	hl
	ld	(ix + -3), hl
	ld	l, (ix + -5)
	ld	h, (ix + -4)
	dec.sis	hl
	ld	bc, 0
	jq	BB8_2
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_itoa_32
_itoa_32:
	ld	hl, -9
	call	__frameset
	ld	iy, (ix + 9)
	ld	e, (ix + 12)
	or	a, a
	sbc	hl, hl
	ld	(ix + -3), hl
	ld	c, 0
	lea	hl, iy + 0
	call	__lcmpzero
	jq	nz, BB9_2
	ld	hl, (ix + 6)
	push	hl
	pop	iy
	ld	hl, (iy)
	ld	(hl), 48
	ld	iy, (iy)
	ld	(iy + 1), 0
	or	a, a
	sbc	hl, hl
	jq	BB9_21
BB9_2:
	ld	a, (ix + 15)
	lea	hl, iy + 0
	call	__lcmpzero
	call	__setflag
	ld	d, 1
	ld	h, 0
	ld	l, d
	jq	m, BB9_4
	ld	l, h
BB9_4:
	cp	a, 10
	jq	z, BB9_6
	ld	d, h
BB9_6:
	ld	a, l
	and	a, d
	ld	d, a
	or	a, a
	sbc	hl, hl
	ld	e, c
	lea	bc, iy + 0
	ld	a, (ix + 12)
	call	__lsub
	push	hl
	pop	iy
	ld	(ix + -5), d
	bit	0, d
	jq	nz, BB9_8
	push	bc
	pop	iy
BB9_8:
	bit	0, (ix + -5)
	jq	nz, BB9_10
	ld	e, (ix + 12)
BB9_10:
	xor	a, a
	ld	(ix + -4), a
BB9_11:
	lea	hl, iy + 0
	call	__lcmpzero
	jq	z, BB9_12
	ld	bc, 0
	ld	a, (ix + 15)
	ld	c, a
	xor	a, a
	lea	hl, iy + 0
	call	__ldivs
	ld	(ix + -9), hl
	ld	(ix + -6), e
	call	__lmulu
	push	hl
	pop	bc
	lea	hl, iy + 0
	or	a, a
	sbc	hl, bc
	push	hl
	pop	bc
	ld	de, 10
	or	a, a
	sbc	hl, de
	call	__setflag
	ld	hl, 87
	jq	p, BB9_15
	ld	hl, 48
BB9_15:
	ld	a, l
	add	a, c
	ld	d, a
	ld	hl, (ix + 6)
	ld	iy, (hl)
	ld	hl, (ix + -3)
	ld	e, (ix + -4)
	ld	bc, 1
	xor	a, a
	call	__ladd
	ld	(ix + -4), e
	ld	bc, (ix + -3)
	add	iy, bc
	ld	(iy), d
	ld	iy, (ix + -9)
	ld	(ix + -3), hl
	ld	e, (ix + -6)
	jq	BB9_11
BB9_12:
	ld	d, 0
	ld	e, (ix + -4)
BB9_16:
	ld	bc, 0
	ld	l, (ix + 18)
	ld	h, (ix + 19)
	ld	c, l
	ld	b, h
	xor	a, a
	ld	hl, (ix + -3)
	call	__lcmpu
	ld	iy, (ix + 6)
	jq	nc, BB9_18
	ld	iy, (iy)
	ld	hl, (ix + -3)
	ld	bc, 1
	ld	a, d
	call	__ladd
	ld	bc, (ix + -3)
	add	iy, bc
	ld	(iy), 48
	ld	(ix + -3), hl
	jq	BB9_16
BB9_18:
	ld	bc, (ix + -3)
	ld	l, 1
	ld	a, (ix + -5)
	xor	a, l
	bit	0, a
	jq	nz, BB9_22
	ld	hl, (ix + 6)
	ld	iy, (hl)
	push	bc
	pop	hl
	ld	(ix + -3), hl
	ld	bc, 1
	ld	a, d
	call	__ladd
	ld	(ix + -4), e
	ld	de, (ix + -3)
	add	iy, de
	ld	(iy), 45
	ld	iy, (ix + 6)
	push	hl
	pop	bc
	jq	BB9_20
BB9_22:
	ld	(ix + -4), e
BB9_20:
	ld	(ix + -3), bc
	ld	hl, (iy)
	add	hl, bc
	ld	(hl), 0
	ld	hl, (iy)
	push	bc
	push	hl
	call	_reverse
	pop	hl
	pop	hl
	ld	hl, (ix + -3)
	ld	c, (ix + -4)
BB9_21:
	ld	e, c
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_ftoa_32
_ftoa_32:
	ld	hl, -10
	call	__frameset
	ld	iy, (ix + 9)
	ld	d, (ix + 12)
	ld	bc, 0
	xor	a, a
	lea	hl, iy + 0
	ld	e, d
	call	__fcmp
	jq	p, BB10_2
	ld	a, 0
	jq	BB10_3
BB10_2:
	ld	a, 1
BB10_3:
	ld	hl, (ix + 6)
	ld	e, 54
	bit	0, a
	jq	nz, BB10_5
	lea	bc, iy + 0
	ld	a, d
	call	__fneg
	push	bc
	pop	iy
	ld	d, a
	push	hl
	pop	bc
	inc	bc
	ld	(ix + -3), bc
	ld	(hl), 45
	jq	BB10_6
BB10_5:
	ld	(ix + -3), hl
BB10_6:
	lea	bc, iy + 0
	ld	a, d
	ld	hl, -5782100
	call	__fadd
	push	bc
	pop	hl
	ld	e, a
	call	__ftol
	push	bc
	pop	iy
	ld	d, a
	call	__ltof
	ld	(ix + -6), bc
	ld	(ix + -9), a
	push	hl
	pop	bc
	ld	a, e
	ld	hl, (ix + -6)
	ld	e, (ix + -9)
	call	__fsub
	lea	hl, iy + 0
	ld	e, d
	call	__lcmpzero
	jq	nz, BB10_8
	ld	iy, (ix + -3)
	ld	(iy), 48
	inc	iy
	jq	BB10_15
BB10_8:
	ld	(ix + -10), a
	ld	(ix + -9), bc
	ld	l, 10
	ld	(ix + -6), l
	ld	(ix + -5), h
	ld	e, 0
BB10_9:
	or	a, a
	sbc	hl, hl
	lea	bc, iy + 0
	ld	a, d
	call	__lcmpu
	call	__setflag
	ld	a, e
	jq	p, BB10_11
	lea	hl, iy + 0
	ld	e, d
	ld	bc, 10
	call	__ldivu
	ld	d, e
	ld	c, (ix + -6)
	ld	b, (ix + -5)
	ld	b, l
	ld	e, a
	ld	(ix + -6), c
	ld	(ix + -5), b
	mlt	bc
	ld	a, iyl
	sub	a, c
	or	a, 48
	ld	iy, (ix + -3)
	ld	(iy), a
	push	hl
	pop	iy
	jq	BB10_9
BB10_11:
	ld	iy, (ix + -3)
	lea	bc, iy + 0
BB10_12:
	push	bc
	pop	hl
	lea	de, iy + 0
	or	a, a
	sbc	hl, de
	jq	nc, BB10_14
	ld	(ix + -6), iy
	ld	hl, (ix + -6)
	dec	hl
	ld	(ix + -6), hl
	ld	a, (iy + -1)
	lea	de, iy + 0
	push	bc
	pop	iy
	ld	l, (iy)
	push	de
	pop	iy
	ld	(iy + -1), l
	push	bc
	pop	hl
	ld	(hl), a
	inc	hl
	push	hl
	pop	bc
	ld	iy, (ix + -6)
	jq	BB10_12
BB10_14:
	ld	iy, (ix + -3)
	ld	(iy), 46
	ld	bc, (ix + -9)
	ld	a, (ix + -10)
	ld	hl, 2097152
	ld	e, 65
	call	__fmul
	call	__ftol
	ld	a, c
	add	a, 48
	ld	(iy + 1), a
	lea	iy, iy + 2
BB10_15:
	ld	hl, (ix + 6)
	ld	(iy), 0
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_ti_read_in_d
_ti_read_in_d:
	call	__frameset0
	ld	hl, (ix + 6)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB11_4
	call	_os_GetCSC
	ld	iy, (ix + 6)
	cp	a, 9
	jq	nz, BB11_2
BB11_4:
	pop	ix
	ret
BB11_2:
	ld.sis	bc, 0
BB11_3:
	ld	de, 0
	ld	e, c
	ld	d, b
	lea	hl, iy + 0
	add	hl, de
	ld	(hl), a
	inc.sis	bc
	jq	BB11_3
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_ti_raed_in_s
_ti_raed_in_s:
	ld	hl, -10
	call	__frameset
	ld	hl, 1
	push	hl
	call	_malloc
	push	hl
	pop	de
	pop	hl
	push	de
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB12_1
	ld	hl, -1
	push	hl
	call	_os_ThrowError
	ld	de, 0
	pop	hl
	jq	BB12_10
BB12_1:
	ld	iy, 0
BB12_2:
BB12_3:
	lea	hl, iy + 0
	ld	bc, 65535
	or	a, a
	sbc	hl, bc
	jq	z, BB12_11
	ld	(ix + -6), de
	ld	(ix + -3), iy
	call	_os_GetCSC
	ld	(ix + -7), a
	ld	hl, (ix + -3)
	inc	hl
	ld	(ix + -10), hl
	push	hl
	ld	hl, (ix + -6)
	push	hl
	call	_realloc
	pop	de
	pop	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB12_5
	ld	hl, (ix + -3)
	inc	hl
	ld	(ix + -3), hl
	ld	hl, -1
	push	hl
	call	_os_ThrowError
	pop	hl
	ld	de, (ix + -6)
	ld	iy, (ix + -3)
	jq	BB12_3
BB12_5:
	ld	bc, (ix + -3)
	ld	a, (ix + -7)
	cp	a, 9
	jq	z, BB12_8
	push	hl
	pop	iy
	add	iy, bc
	ld	(iy), a
	ld	iy, (ix + -10)
	ex	de, hl
	jq	BB12_2
BB12_11:
	jq	BB12_10
BB12_8:
	ld	de, (ix + -6)
	push	de
	pop	hl
	add	hl, bc
	ld	(hl), 0
BB12_10:
	ex	de, hl
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_ti_print_out_s
_ti_print_out_s:
	ld	hl, -23
	call	__frameset
	ld	hl, (ix + 6)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB13_20
	ld	hl, 1
	lea	de, ix + -6
	ld	(ix + -23), de
	push	hl
	call	_malloc
	ld	de, (ix + 6)
	push	de
	pop	iy
	ld	(ix + -9), hl
	ld.sis	hl, 0
	pop	de
	lea	de, ix + 9
	ld	(ix + -3), de
BB13_2:
	ld	(ix + -11), l
	ld	(ix + -10), h
	ld	bc, 0
	ld	c, l
	ld	b, h
	lea	hl, iy + 0
	add	iy, bc
	ld	a, (iy)
	ld	(ix + -14), a
	or	a, a
	push	bc
	pop	de
	inc	de
	jq	z, BB13_19
	ld	(ix + -17), bc
	push	de
	pop	iy
	ld	e, (ix + -11)
	ld	d, (ix + -10)
	ld	a, (ix + -14)
	cp	a, 37
	jq	nz, BB13_9
	lea	de, iy + 0
	add	hl, de
	ld	a, (hl)
	ld	(ix + -20), a
	ld	hl, 20
	push	hl
	call	_malloc
	push	hl
	pop	iy
	pop	hl
	ld	(ix + -6), iy
	ld	c, (ix + -20)
	ld	a, c
	rlc	a
	sbc	hl, hl
	push	hl
	pop	de
	ld	e, c
	push	de
	pop	hl
	ld	bc, 100
	or	a, a
	sbc	hl, bc
	jq	nz, BB13_10
	ld	(ix + -14), iy
	ld	iy, (ix + -3)
	lea	hl, iy + 3
	ld	(ix + -3), hl
	ld	de, (iy)
	push	de
	pop	hl
	push	de
	pop	iy
	add	iy, iy
	sbc	hl, hl
	ld	bc, 0
	push	bc
	ld	bc, 10
	push	bc
	push	hl
	push	de
BB13_6:
	ld	hl, (ix + -23)
	push	hl
	call	_itoa_32
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (ix + -14)
	jq	BB13_7
BB13_9:
	push	iy
	ld	bc, (ix + -9)
	push	bc
	call	_allocate_more
	ld	l, (ix + -11)
	ld	h, (ix + -10)
	ld	de, (ix + 6)
	push	de
	pop	bc
	pop	de
	pop	de
	ld	iy, (ix + -9)
	ld	de, (ix + -17)
	add	iy, de
	ld	a, (ix + -14)
	ld	(iy), a
	push	bc
	jq	BB13_18
BB13_10:
	push	de
	pop	hl
	ld	bc, 102
	or	a, a
	sbc	hl, bc
	jq	nz, BB13_12
	lea	bc, iy + 0
	ld	(ix + -14), bc
	ld	iy, (ix + -3)
	lea	hl, iy + 6
	ld	(ix + -3), hl
	ld	hl, (iy)
	ld	a, (iy + 3)
	ld	e, a
	push	de
	push	hl
	push	bc
	call	_ftoa_32
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (ix + -14)
	ld	(ix + -6), hl
BB13_7:
	push	hl
	call	_strlen
	ld	(ix + -20), hl
	pop	de
	push	hl
	pop	iy
	ld	de, (ix + -17)
	add	iy, de
	push	iy
	ld	hl, (ix + -9)
	push	hl
	call	_allocate_more
	ld	(ix + -9), hl
	pop	de
	pop	de
	push	hl
	pop	iy
	ld	de, (ix + -17)
	add	iy, de
	ld	de, (ix + -20)
	push	de
	ld	de, (ix + -14)
	push	de
	push	iy
	call	_memcpy
	ld	hl, (ix + -9)
	pop	de
	pop	de
	pop	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB13_16
	ld	hl, -1
	push	hl
	call	_os_ThrowError
	pop	hl
	ld	hl, 0
	ld	(ix + -9), hl
BB13_16:
	ld	iy, (ix + -14)
BB13_17:
	push	iy
	call	_free
	pop	hl
	ld	l, (ix + -11)
	ld	h, (ix + -10)
	inc.sis	hl
	ld	de, (ix + 6)
	push	de
BB13_18:
	pop	iy
	inc.sis	hl
	jq	BB13_2
BB13_12:
	push	de
	pop	hl
	ld	bc, 112
	or	a, a
	sbc	hl, bc
	jq	nz, BB13_14
	ld	(ix + -14), iy
	ld	iy, (ix + -3)
	lea	hl, iy + 3
	ld	(ix + -3), hl
	ld	hl, (iy)
	ld	de, 0
	push	de
	ld	bc, 10
	push	bc
	push	de
	push	hl
	jq	BB13_6
BB13_14:
	ex	de, hl
	ld	de, 115
	or	a, a
	sbc	hl, de
	jq	nz, BB13_17
	push	iy
	call	_free
	pop	hl
	ld	iy, (ix + -3)
	lea	hl, iy + 3
	ld	(ix + -3), hl
	ld	hl, (iy)
	ld	(ix + -14), hl
	jq	BB13_7
BB13_19:
	ld	(ix + -20), de
	push	de
	ld	hl, (ix + -9)
	push	hl
	call	_allocate_more
	pop	de
	pop	de
	push	hl
	pop	iy
	ld	de, (ix + -20)
	add	iy, de
	ld	(iy), 0
	push	hl
	call	_os_PutStrFull
	pop	hl
BB13_20:
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_main
_main:
	or	a, a
	sbc	hl, hl
	ret
	section	.text,"ax",@progbits

	section	.rodata,"a",@progbits
	private	L_.str
L_.str:
	db	"r",000o

	section	.rodata,"a",@progbits
	private	L_.str.1
L_.str.1:
	db	"r+",000o

	section	.rodata,"a",@progbits
	private	L_.str.2
L_.str.2:
	db	"w+",000o

	section	.rodata,"a",@progbits
	private	L_.str.3
L_.str.3:
	db	"a+",000o

	section	.rodata,"a",@progbits
	private	L___const.pull_file.pmodes
L___const.pull_file.pmodes:
	dl	L_.str
	dl	L_.str.1
	dl	L_.str.2
	dl	L_.str.3

	section	.rodata,"a",@progbits
	private	L_.str.4
L_.str.4:
	db	"w",000o

	section	.rodata,"a",@progbits
	private	L_.str.5
L_.str.5:
	db	"a",000o

	section	.rodata,"a",@progbits
	private	L___const.write_file.pmode
L___const.write_file.pmode:
	dl	L_.str.4
	dl	L_.str.5
	dl	L_.str.1
	dl	L_.str.2
	dl	L_.str.3

	ident	"clang version 12.0.0 (https://github.com/jacobly0/llvm-project 170be88120e3aa88c20eea5615ba76b8f1d6c647)"
	extern	__ldivs
	extern	__ldivu
	extern	__Unwind_SjLj_Register
	extern	_malloc
	extern	__fadd
	extern	__lcmpzero
	extern	_ti_Close
	extern	_memcpy
	extern	__ladd
	extern	__ftol
	extern	_strlen
	extern	_ti_Read
	extern	__setflag
	extern	__iand
	extern	_os_PutStrFull
	extern	_ti_Open
	extern	__ltof
	extern	_ti_GetSize
	extern	_os_GetCSC
	extern	_realloc
	extern	_free
	extern	__fsub
	extern	_os_ThrowError
	extern	__frameset
	extern	__lsub
	extern	__lmulu
	extern	_strcmp
	extern	_ti_Write
	extern	__fmul
	extern	__Unwind_SjLj_Unregister
	extern	__fneg
	extern	_calloc
	extern	__lcmpu
	extern	__fcmp
	extern	__frameset0
